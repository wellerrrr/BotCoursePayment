from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram import Bot, types, F
from aiogram.types import (
    Message, 
    CallbackQuery,
    KeyboardButton, 
    ReplyKeyboardMarkup,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardRemove
)
from services.reviews import Database

from config import config
import logging

logger = logging.getLogger(__name__)
db = Database()

class AdminStates(StatesGroup):
    WAITING_FOR_REPLY = State()

USER_START_MESSAGE = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
ADMIN_START_MESSAGE = "üëÆ –í—ã –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ù–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∑–¥–µ—Å—å. /tickets - –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."

async def start(message: Message, state: FSMContext):
    await state.clear()
    if message.from_user.id in config.ADMIN_IDS:
        await message.answer(ADMIN_START_MESSAGE)
    else:
        await message.answer(USER_START_MESSAGE)

async def handle_user_question(message: Message, bot: Bot):
    if message.from_user.id in config.ADMIN_IDS or message.text.startswith('/'):
        return

    ticket_id = db.create_ticket(
        user_id=message.from_user.id,
        username=message.from_user.username,
        full_name=message.from_user.full_name,
        question=message.text
    )

    if db.get_user_message_count(message.from_user.id) > 5:
        db.delete_old_messages(message.from_user.id)

    for admin_id in config.ADMIN_IDS:
        try:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{ticket_id}")]
            ])
            await bot.send_message(
                chat_id=admin_id,
                text=f"üÜï –¢–∏–∫–µ—Ç #{ticket_id}\n"
                     f"üë§ {message.from_user.full_name or '–ë–µ–∑ –∏–º–µ–Ω–∏'}\n"
                     f"üì© –í–æ–ø—Ä–æ—Å:\n{message.text}",
                reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    await message.answer(f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")

async def handle_reply_callback(callback: CallbackQuery, state: FSMContext):
    try:
        _, ticket_id_str = callback.data.split('_')
        ticket_id = int(ticket_id_str)
        
        ticket = db.get_ticket(ticket_id)
        if not ticket:
            await callback.answer("–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return
            
        await state.set_state(AdminStates.WAITING_FOR_REPLY)
        await state.update_data(
            ticket_id=ticket_id,
            user_id=ticket['user_id']
        )
        
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç #{ticket_id}:",
            reply_markup=types.ForceReply()
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_reply_callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

async def handle_close_callback(callback: CallbackQuery):
    ticket_id = int(callback.data.split('_')[1])
    db.close_ticket(ticket_id)
    
    await callback.message.edit_text(
        text=f"üö´ –ó–ê–ö–†–´–¢–û\n{callback.message.text}",
        reply_markup=None
    )
    await callback.answer("–¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç", show_alert=True)

async def handle_close_ticket(callback: CallbackQuery, bot: Bot):
    try:
        ticket_id = int(callback.data.split('_')[1])
        
        ticket = db.get_ticket(ticket_id)
        if not ticket:
            await callback.answer("–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return
        
        deleted_count = db.delete_user_messages(ticket['user_id'])        
        new_text = f"üö´ –ó–ê–ö–†–´–¢–û (—É–¥–∞–ª–µ–Ω–æ {deleted_count} —Å–æ–æ–±—â–µ–Ω–∏–π)\n{callback.message.text}"
        
        if new_text != callback.message.text:
            await callback.message.edit_text(
                text=new_text,
                reply_markup=None
            )
        else: 
            await callback.message.edit_reply_markup(reply_markup=None)
        
        await callback.answer(
            f"–£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", 
            show_alert=True
        )
        
        try:
            await bot.send_message(
                chat_id=ticket['user_id'],
                text="‚ÑπÔ∏è –í—Å–µ –≤–∞—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –±—ã–ª–∏ –∑–∞–∫—Ä—ã—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

async def handle_admin_reply(message: Message, bot: Bot, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    data = await state.get_data()
    ticket_id = data.get('ticket_id')
    user_id = data.get('user_id')
    
    if not ticket_id or not user_id or message.text.startswith('/'):
        await message.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ç–∞ –ø–æ—Ç–µ—Ä—è–Ω—ã")
        await state.clear()
        return

    try:
        await bot.send_message(
            chat_id=user_id,
            text=f"üì® –û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n{message.text}"
        )
        db.close_ticket(ticket_id)
        
        await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

    except AttributeError as ae:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {ae}")
        
    finally:
        await state.clear()
        await show_tickets_menu(message)

async def show_tickets_menu(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ —Ç–∏–∫–µ—Ç–∞–º–∏"""
    tickets = db.get_open_tickets()
    
    if not tickets:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.", reply_markup=ReplyKeyboardRemove())
        return
    
    keyboard = [
        [KeyboardButton(text=f"#{ticket['id']} {ticket['full_name']}")]
        for ticket in tickets
    ]
    keyboard.append([KeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫")])
    
    reply_markup = ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        one_time_keyboard=False
    )
    
    await message.answer(
        "üìÇ –û—Ç–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã:",
        reply_markup=reply_markup
    )

async def handle_ticket_select(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–∫–µ—Ç–∞ –∞–¥–º–∏–Ω–æ–º"""
    if message.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫":
        await show_tickets_menu(message)
        return

    try:
        ticket_id = int(message.text.split()[0][1:])
    except:
        await message.answer("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–∏–∫–µ—Ç–∞")
        return

    ticket = next((t for t in db.get_open_tickets() if t['id'] == ticket_id), None)
    
    if not ticket:
        await message.answer("–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!", reply_markup=ReplyKeyboardRemove())
        return

    await state.set_state(AdminStates.WAITING_FOR_REPLY)
    await state.update_data(
        ticket_id=ticket_id,
        user_id=ticket['user_id']
    )

    await message.answer(
        f"üë§ {ticket['full_name']} (@{ticket['username']})\n"
        f"‚ùì –í–æ–ø—Ä–æ—Å:\n\n<strong>{ticket['question']}</strong>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç:",
        reply_markup=ReplyKeyboardRemove(), parse_mode='HTML'
    )
