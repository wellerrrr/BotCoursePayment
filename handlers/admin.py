from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils.media_group import MediaGroupBuilder
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram import Router, F, types, Bot
from aiogram.filters import Command

from middlewares.admin import AdminPhotoMiddleware
from services.reviews import ReviewService
from services.session import admin_session
from keyboards.admin import get_admin_kb, get_back_kb

import logging
import asyncio
from config import config

class AdminStates(StatesGroup):
    waiting_for_new_text = State()

logger = logging.getLogger(__name__)
admin_router = Router()
admin_router.message.middleware(AdminPhotoMiddleware())
admin_router.callback_query.middleware(AdminPhotoMiddleware())

@admin_router.message(Command("admin"))
async def admin_login(message: Message, bot: Bot):
    """–í—Ö–æ–¥ —Å –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π –ø—Ä–∞–≤"""
    try:
        if message.from_user.id in config.ADMIN_IDS:
            await bot.edit_message_reply_markup(
                chat_id=message.chat.id,
                message_id=message.message_id - 1,
                reply_markup=None
            )
    except TelegramBadRequest:
        pass
    
    if message.from_user.id in config.ADMIN_IDS:
        admin_session.login(message.from_user.id)
        await message.answer(
            "üîê –ê–¥–º–∏–Ω-—Ä–µ–∂–∏–º –ê–ö–¢–ò–í–ò–†–û–í–ê–ù\n",
            reply_markup=get_admin_kb()
        )
    else:
        await message.answer('‚õî –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º!')

@admin_router.callback_query(F.data == "admin_add_review")
async def add_review_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞"""
    await callback.message.answer(
        "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–∑—ã–≤–∞ (—Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ)\n"
        "–ò–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
    )
    await callback.answer()

@admin_router.message(F.photo)
async def handle_admin_photo(message: Message, review_service: ReviewService):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¢–û–õ–¨–ö–û –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤"""
    if not admin_session.is_active(message.from_user.id):
        await message.answer("‚úã –†–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin")
        return

    try:
        photo_url = message.photo[-1].file_id
        if await review_service.add_review(photo_url):
            await message.answer("‚úÖ –û—Ç–∑—ã–≤ –¥–æ–±–∞–≤–ª–µ–Ω",
                                 reply_markup=get_admin_kb())
            
        else:
            await message.answer("‚ùå –¢–∞–∫–æ–π –æ—Ç–∑—ã–≤ —É–∂–µ –µ—Å—Ç—å",
                                 reply_markup=get_admin_kb())
    except Exception as e:
        logger.error(f"Photo error: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ")

@admin_router.message(Command("cancel"))
async def cancel_operation(message: Message):
    user_id = message.from_user.id
    admin_session.logout(user_id)
    
    await message.delete()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_admin_kb())

@admin_router.callback_query(F.data == "admin_list_reviews")
async def show_all_reviews(callback: CallbackQuery, review_service: ReviewService):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ—Ç–∑—ã–≤—ã"""
    try:
        await callback.answer()
        reviews = await review_service.get_all_reviews()
        
        if not reviews:
            await callback.message.answer("üì≠ –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤")
            return

        media_group = MediaGroupBuilder()
        for photo_url in reviews[:10]:
            media_group.add_photo(media=photo_url)
        
        await callback.message.answer_media_group(media=media_group.build())
            
    except Exception as e:
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–∑—ã–≤–æ–≤")

@admin_router.callback_query(F.data.startswith("del_preview_"))
async def preview_for_deletion(callback: CallbackQuery, review_service: ReviewService):
    """–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º —Å –ø–ª–∞–≤–Ω—ã–º –ø–µ—Ä–µ—Ö–æ–¥–æ–º"""
    user_id = callback.from_user.id
    try:
        await callback.message.edit_text("–ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–∑—ã–≤... ‚è≥")
        await asyncio.sleep(0.5)

        review_id = int(callback.data.split("_")[2])
        photo_url = await review_service.get_photo_url(review_id)
        
        if not photo_url:
            await callback.message.edit_text("‚ùå –û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await asyncio.sleep(1)
            await back_to_delete_menu(callback, review_service)
            return

        builder = InlineKeyboardBuilder()
        builder.button(text="‚úÖ –£–¥–∞–ª–∏—Ç—å", callback_data=f"del_confirm_{review_id}")
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_delete_reviews")
        
        await callback.message.delete()
        sent_msg = await callback.message.answer_photo(
            photo_url,
            caption=f"–û—Ç–∑—ã–≤ #{review_id}\n–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –æ—Ç–∑—ã–≤?",
            reply_markup=builder.as_markup()
        )

        await callback.answer()
        return sent_msg
        
    except Exception as e:
        logger.error(f"User {user_id} error: {str(e)}")
        await callback.message.edit_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–∑—ã–≤–∞\n–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é...",
            reply_markup=None
        )
        await asyncio.sleep(1)
        await back_to_delete_menu(callback, review_service)
        await callback.answer()

@admin_router.callback_query(F.data == "admin_delete_reviews")
async def back_to_delete_menu(callback: CallbackQuery, review_service: ReviewService):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è"""
    user_id = callback.from_user.id
    try:         
        reviews = await review_service.get_reviews_for_deletion()
        
        if not reviews:
            await callback.message.answer(
                "üì≠ –ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                reply_markup=get_back_kb()
            )
            return

        builder = InlineKeyboardBuilder()
        for review_id, _ in reviews:
            builder.button(
                text=f"‚ùå {review_id}",
                callback_data=f"del_preview_{review_id}"
            )
        builder.button(text="üîô –í –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back")
        builder.adjust(3, repeat=True)
        
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–∑—ã–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"User {user_id} error: {str(e)}")
        await callback.message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ",
            reply_markup=get_back_kb()
        )
    finally:
        await callback.answer()

@admin_router.callback_query(F.data.startswith("del_confirm_"))
async def confirm_review_deletion(callback: CallbackQuery, review_service: ReviewService):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å –ø–µ—Ä–µ–Ω—É–º–µ—Ä–∞—Ü–∏–µ–π"""
    try:
        review_id = int(callback.data.split("_")[2])
        
        if await review_service.delete_review_and_reset_ids(review_id):
            await callback.message.delete()
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            reviews = await review_service.get_reviews_for_deletion()
            count = len(reviews)
            
            await callback.message.answer(
                f"‚úÖ –û—Ç–∑—ã–≤ —É–¥–∞–ª–µ–Ω. –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {count}\n"
                "üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
                reply_markup=get_admin_kb()
            )
        else:
            await callback.message.edit_caption(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤",
                reply_markup=get_back_kb()
            )
            
    except Exception as e:
        logger.error(f"Delete error: {str(e)}")
        await callback.message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏",
            reply_markup=get_admin_kb()
        )
    finally:
        await callback.answer()

@admin_router.callback_query(F.data == "admin_back")
async def back_to_admin_panel(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    try:
        await callback.message.edit_text(
            "üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
            reply_markup=get_admin_kb()
        )
    except Exception as e:
        logger.error(f"Error: {e}")
        await callback.message.answer(
            "üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
            reply_markup=get_admin_kb()
        )
    finally:
        await callback.answer()

@admin_router.callback_query(F.data == "admin_exit")
async def exit_admin_panel(callback: CallbackQuery):
    """–ü–æ–ª–Ω—ã–π –≤—ã—Ö–æ–¥ —Å –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π –ø—Ä–∞–≤"""
    try:
        user_id = callback.from_user.id
        admin_session.logout(user_id)
        
        await callback.message.delete()
        await callback.message.answer(
            "üîí –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–∞\n",
            reply_markup=types.ReplyKeyboardRemove()
        )
    except Exception as e:
        logger.error(f"Exit error: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞")
    finally:
        await callback.answer()
    
@admin_router.message(F.photo)
async def handle_admin_photo(
    message: Message, 
    review_service: ReviewService,
    bot: Bot
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¢–û–õ–¨–ö–û –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    try:
        if not await AdminPhotoMiddleware.is_admin(message.from_user.id):
            return

        photo_url = message.photo[-1].file_id
        success, review_id = await review_service.add_review(photo_url)
        
        if success:
            await message.answer(f"‚úÖ –û—Ç–∑—ã–≤ #{review_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            
    except Exception as e:
        logger.error(f"Admin photo error: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ")

